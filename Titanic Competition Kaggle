{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2286a6a9",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-08-15T23:33:48.198108Z",
     "iopub.status.busy": "2024-08-15T23:33:48.197603Z",
     "iopub.status.idle": "2024-08-15T23:33:51.615878Z",
     "shell.execute_reply": "2024-08-15T23:33:51.613859Z"
    },
    "papermill": {
     "duration": 3.438047,
     "end_time": "2024-08-15T23:33:51.619041",
     "exception": false,
     "start_time": "2024-08-15T23:33:48.180994",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/titanic/train.csv\n",
      "/kaggle/input/titanic/test.csv\n",
      "/kaggle/input/titanic/gender_submission.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import LabelEncoder, OrdinalEncoder, StandardScaler, LabelEncoder\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.impute import SimpleImputer\n",
    "from sklearn.model_selection import train_test_split, StratifiedKFold, cross_val_score, GridSearchCV\n",
    "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, roc_curve, auc \n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c95e18db",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T23:33:51.648190Z",
     "iopub.status.busy": "2024-08-15T23:33:51.647539Z",
     "iopub.status.idle": "2024-08-15T23:33:51.675385Z",
     "shell.execute_reply": "2024-08-15T23:33:51.674155Z"
    },
    "papermill": {
     "duration": 0.046163,
     "end_time": "2024-08-15T23:33:51.678673",
     "exception": false,
     "start_time": "2024-08-15T23:33:51.632510",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_data = pd.read_csv('/kaggle/input/titanic/train.csv')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9abe7e21",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T23:33:51.707216Z",
     "iopub.status.busy": "2024-08-15T23:33:51.706789Z",
     "iopub.status.idle": "2024-08-15T23:33:51.740764Z",
     "shell.execute_reply": "2024-08-15T23:33:51.739337Z"
    },
    "papermill": {
     "duration": 0.051491,
     "end_time": "2024-08-15T23:33:51.743639",
     "exception": false,
     "start_time": "2024-08-15T23:33:51.692148",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "\n",
       "   Parch            Ticket     Fare Cabin Embarked  \n",
       "0      0         A/5 21171   7.2500   NaN        S  \n",
       "1      0          PC 17599  71.2833   C85        C  \n",
       "2      0  STON/O2. 3101282   7.9250   NaN        S  \n",
       "3      0            113803  53.1000  C123        S  \n",
       "4      0            373450   8.0500   NaN        S  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9ecbd548",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T23:33:51.772664Z",
     "iopub.status.busy": "2024-08-15T23:33:51.772199Z",
     "iopub.status.idle": "2024-08-15T23:33:51.800928Z",
     "shell.execute_reply": "2024-08-15T23:33:51.798927Z"
    },
    "papermill": {
     "duration": 0.046901,
     "end_time": "2024-08-15T23:33:51.803849",
     "exception": false,
     "start_time": "2024-08-15T23:33:51.756948",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 12 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   PassengerId  891 non-null    int64  \n",
      " 1   Survived     891 non-null    int64  \n",
      " 2   Pclass       891 non-null    int64  \n",
      " 3   Name         891 non-null    object \n",
      " 4   Sex          891 non-null    object \n",
      " 5   Age          714 non-null    float64\n",
      " 6   SibSp        891 non-null    int64  \n",
      " 7   Parch        891 non-null    int64  \n",
      " 8   Ticket       891 non-null    object \n",
      " 9   Fare         891 non-null    float64\n",
      " 10  Cabin        204 non-null    object \n",
      " 11  Embarked     889 non-null    object \n",
      "dtypes: float64(2), int64(5), object(5)\n",
      "memory usage: 83.7+ KB\n"
     ]
    }
   ],
   "source": [
    "train_data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e449c735",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T23:33:51.833189Z",
     "iopub.status.busy": "2024-08-15T23:33:51.832758Z",
     "iopub.status.idle": "2024-08-15T23:33:51.848048Z",
     "shell.execute_reply": "2024-08-15T23:33:51.846603Z"
    },
    "papermill": {
     "duration": 0.033041,
     "end_time": "2024-08-15T23:33:51.851187",
     "exception": false,
     "start_time": "2024-08-15T23:33:51.818146",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "test_data = pd.read_csv('/kaggle/input/titanic/test.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6124f929",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T23:33:51.880670Z",
     "iopub.status.busy": "2024-08-15T23:33:51.880116Z",
     "iopub.status.idle": "2024-08-15T23:33:51.887022Z",
     "shell.execute_reply": "2024-08-15T23:33:51.885595Z"
    },
    "papermill": {
     "duration": 0.025173,
     "end_time": "2024-08-15T23:33:51.890255",
     "exception": false,
     "start_time": "2024-08-15T23:33:51.865082",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(418, 11)\n"
     ]
    }
   ],
   "source": [
    "print(test_data.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "1dd9f9b4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T23:33:51.919249Z",
     "iopub.status.busy": "2024-08-15T23:33:51.918793Z",
     "iopub.status.idle": "2024-08-15T23:33:51.954911Z",
     "shell.execute_reply": "2024-08-15T23:33:51.953435Z"
    },
    "papermill": {
     "duration": 0.054421,
     "end_time": "2024-08-15T23:33:51.957932",
     "exception": false,
     "start_time": "2024-08-15T23:33:51.903511",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>714.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>446.000000</td>\n",
       "      <td>0.383838</td>\n",
       "      <td>2.308642</td>\n",
       "      <td>29.699118</td>\n",
       "      <td>0.523008</td>\n",
       "      <td>0.381594</td>\n",
       "      <td>32.204208</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>257.353842</td>\n",
       "      <td>0.486592</td>\n",
       "      <td>0.836071</td>\n",
       "      <td>14.526497</td>\n",
       "      <td>1.102743</td>\n",
       "      <td>0.806057</td>\n",
       "      <td>49.693429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.420000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>223.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>20.125000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.910400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>446.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>28.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>14.454200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>668.500000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>31.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>891.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>512.329200</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       PassengerId    Survived      Pclass         Age       SibSp  \\\n",
       "count   891.000000  891.000000  891.000000  714.000000  891.000000   \n",
       "mean    446.000000    0.383838    2.308642   29.699118    0.523008   \n",
       "std     257.353842    0.486592    0.836071   14.526497    1.102743   \n",
       "min       1.000000    0.000000    1.000000    0.420000    0.000000   \n",
       "25%     223.500000    0.000000    2.000000   20.125000    0.000000   \n",
       "50%     446.000000    0.000000    3.000000   28.000000    0.000000   \n",
       "75%     668.500000    1.000000    3.000000   38.000000    1.000000   \n",
       "max     891.000000    1.000000    3.000000   80.000000    8.000000   \n",
       "\n",
       "            Parch        Fare  \n",
       "count  891.000000  891.000000  \n",
       "mean     0.381594   32.204208  \n",
       "std      0.806057   49.693429  \n",
       "min      0.000000    0.000000  \n",
       "25%      0.000000    7.910400  \n",
       "50%      0.000000   14.454200  \n",
       "75%      0.000000   31.000000  \n",
       "max      6.000000  512.329200  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "c3b85dcd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T23:33:51.988996Z",
     "iopub.status.busy": "2024-08-15T23:33:51.988538Z",
     "iopub.status.idle": "2024-08-15T23:33:52.000445Z",
     "shell.execute_reply": "2024-08-15T23:33:51.998825Z"
    },
    "papermill": {
     "duration": 0.031127,
     "end_time": "2024-08-15T23:33:52.003512",
     "exception": false,
     "start_time": "2024-08-15T23:33:51.972385",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PassengerId      0\n",
       "Survived         0\n",
       "Pclass           0\n",
       "Name             0\n",
       "Sex              0\n",
       "Age            177\n",
       "SibSp            0\n",
       "Parch            0\n",
       "Ticket           0\n",
       "Fare             0\n",
       "Cabin          687\n",
       "Embarked         2\n",
       "dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "998b0ac0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T23:33:52.033458Z",
     "iopub.status.busy": "2024-08-15T23:33:52.032947Z",
     "iopub.status.idle": "2024-08-15T23:33:52.438322Z",
     "shell.execute_reply": "2024-08-15T23:33:52.436791Z"
    },
    "papermill": {
     "duration": 0.423368,
     "end_time": "2024-08-15T23:33:52.441005",
     "exception": false,
     "start_time": "2024-08-15T23:33:52.017637",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(train_data.isnull(), cmap='viridis', cbar=False)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "7324af14",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T23:33:52.472159Z",
     "iopub.status.busy": "2024-08-15T23:33:52.471700Z",
     "iopub.status.idle": "2024-08-15T23:33:52.482885Z",
     "shell.execute_reply": "2024-08-15T23:33:52.481429Z"
    },
    "papermill": {
     "duration": 0.030392,
     "end_time": "2024-08-15T23:33:52.485662",
     "exception": false,
     "start_time": "2024-08-15T23:33:52.455270",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PassengerId      0\n",
       "Pclass           0\n",
       "Name             0\n",
       "Sex              0\n",
       "Age             86\n",
       "SibSp            0\n",
       "Parch            0\n",
       "Ticket           0\n",
       "Fare             1\n",
       "Cabin          327\n",
       "Embarked         0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_data.isnull().sum()\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "24a0d71b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T23:33:52.518613Z",
     "iopub.status.busy": "2024-08-15T23:33:52.518126Z",
     "iopub.status.idle": "2024-08-15T23:33:52.950039Z",
     "shell.execute_reply": "2024-08-15T23:33:52.948448Z"
    },
    "papermill": {
     "duration": 0.451822,
     "end_time": "2024-08-15T23:33:52.953146",
     "exception": false,
     "start_time": "2024-08-15T23:33:52.501324",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualize missing data\n",
    "sns.heatmap(test_data.isnull(), cmap='viridis', cbar=False)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "f07e0f90",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T23:33:52.986798Z",
     "iopub.status.busy": "2024-08-15T23:33:52.985743Z",
     "iopub.status.idle": "2024-08-15T23:33:52.995497Z",
     "shell.execute_reply": "2024-08-15T23:33:52.993858Z"
    },
    "papermill": {
     "duration": 0.029416,
     "end_time": "2024-08-15T23:33:52.998193",
     "exception": false,
     "start_time": "2024-08-15T23:33:52.968777",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Feature engineering\n",
    "train_data['FamilySize'] = train_data['SibSp'] + train_data['Parch'] + 1\n",
    "test_data['FamilySize'] = test_data['SibSp'] + test_data['Parch'] + 1\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "06703da5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T23:33:53.032847Z",
     "iopub.status.busy": "2024-08-15T23:33:53.032350Z",
     "iopub.status.idle": "2024-08-15T23:33:53.043052Z",
     "shell.execute_reply": "2024-08-15T23:33:53.041639Z"
    },
    "papermill": {
     "duration": 0.030758,
     "end_time": "2024-08-15T23:33:53.045713",
     "exception": false,
     "start_time": "2024-08-15T23:33:53.014955",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_data['IsAlone'] = 0\n",
    "train_data.loc[train_data['FamilySize'] == 1, 'IsAlone'] = 1\n",
    "test_data['IsAlone'] = 0\n",
    "test_data.loc[test_data['FamilySize'] == 1, 'IsAlone'] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "55325297",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T23:33:53.080240Z",
     "iopub.status.busy": "2024-08-15T23:33:53.079235Z",
     "iopub.status.idle": "2024-08-15T23:33:53.091432Z",
     "shell.execute_reply": "2024-08-15T23:33:53.090144Z"
    },
    "papermill": {
     "duration": 0.032539,
     "end_time": "2024-08-15T23:33:53.094305",
     "exception": false,
     "start_time": "2024-08-15T23:33:53.061766",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_data['Title'] = train_data['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)\n",
    "test_data['Title'] = test_data['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "901c7d82",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T23:33:53.127802Z",
     "iopub.status.busy": "2024-08-15T23:33:53.127276Z",
     "iopub.status.idle": "2024-08-15T23:33:53.144661Z",
     "shell.execute_reply": "2024-08-15T23:33:53.142968Z"
    },
    "papermill": {
     "duration": 0.037745,
     "end_time": "2024-08-15T23:33:53.147844",
     "exception": false,
     "start_time": "2024-08-15T23:33:53.110099",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_data['Title'] = train_data['Title'].replace(['Lady', 'Countess','Capt', 'Col', 'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n",
    "train_data['Title'] = train_data['Title'].replace('Mlle', 'Miss')\n",
    "train_data['Title'] = train_data['Title'].replace('Ms', 'Miss')\n",
    "train_data['Title'] = train_data['Title'].replace('Mme', 'Mrs')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "645210ef",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T23:33:53.181379Z",
     "iopub.status.busy": "2024-08-15T23:33:53.180910Z",
     "iopub.status.idle": "2024-08-15T23:33:53.192766Z",
     "shell.execute_reply": "2024-08-15T23:33:53.191536Z"
    },
    "papermill": {
     "duration": 0.031997,
     "end_time": "2024-08-15T23:33:53.195651",
     "exception": false,
     "start_time": "2024-08-15T23:33:53.163654",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "test_data['Title'] = test_data['Title'].replace(['Lady', 'Countess','Capt', 'Col', 'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n",
    "test_data['Title'] = test_data['Title'].replace('Mlle', 'Miss')\n",
    "test_data['Title'] = test_data['Title'].replace('Ms', 'Miss')\n",
    "test_data['Title'] = test_data['Title'].replace('Mme', 'Mrs')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "a40bdab1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T23:33:53.230174Z",
     "iopub.status.busy": "2024-08-15T23:33:53.229735Z",
     "iopub.status.idle": "2024-08-15T23:33:53.247300Z",
     "shell.execute_reply": "2024-08-15T23:33:53.245928Z"
    },
    "papermill": {
     "duration": 0.038703,
     "end_time": "2024-08-15T23:33:53.250542",
     "exception": false,
     "start_time": "2024-08-15T23:33:53.211839",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_data['AgeGroup'] = pd.cut(train_data['Age'], bins=[0, 12, 18, 30, 50, 100], labels=['Child', 'Teenager', 'Young Adult', 'Adult', 'Senior'])\n",
    "test_data['AgeGroup'] = pd.cut(test_data['Age'], bins=[0, 12, 18, 30, 50, 100], labels=['Child', 'Teenager', 'Young Adult', 'Adult', 'Senior'])\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "e4379d28",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T23:33:53.284795Z",
     "iopub.status.busy": "2024-08-15T23:33:53.284342Z",
     "iopub.status.idle": "2024-08-15T23:33:53.299442Z",
     "shell.execute_reply": "2024-08-15T23:33:53.298222Z"
    },
    "papermill": {
     "duration": 0.035993,
     "end_time": "2024-08-15T23:33:53.302749",
     "exception": false,
     "start_time": "2024-08-15T23:33:53.266756",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_data['FareGroup'] = pd.qcut(train_data['Fare'], q=4, labels=['Low', 'Medium', 'High', 'Very High'])\n",
    "test_data['FareGroup'] = pd.qcut(test_data['Fare'], q=4, labels=['Low', 'Medium', 'High', 'Very High'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "7a6f4110",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T23:33:53.336001Z",
     "iopub.status.busy": "2024-08-15T23:33:53.335580Z",
     "iopub.status.idle": "2024-08-15T23:33:53.360284Z",
     "shell.execute_reply": "2024-08-15T23:33:53.358747Z"
    },
    "papermill": {
     "duration": 0.044858,
     "end_time": "2024-08-15T23:33:53.363395",
     "exception": false,
     "start_time": "2024-08-15T23:33:53.318537",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>FamilySize</th>\n",
       "      <th>IsAlone</th>\n",
       "      <th>Title</th>\n",
       "      <th>AgeGroup</th>\n",
       "      <th>FareGroup</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>Mr</td>\n",
       "      <td>Young Adult</td>\n",
       "      <td>Low</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>Adult</td>\n",
       "      <td>Very High</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Miss</td>\n",
       "      <td>Young Adult</td>\n",
       "      <td>Medium</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>Mrs</td>\n",
       "      <td>Adult</td>\n",
       "      <td>Very High</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Mr</td>\n",
       "      <td>Adult</td>\n",
       "      <td>Medium</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "\n",
       "   Parch            Ticket     Fare Cabin Embarked  FamilySize  IsAlone Title  \\\n",
       "0      0         A/5 21171   7.2500   NaN        S           2        0    Mr   \n",
       "1      0          PC 17599  71.2833   C85        C           2        0   Mrs   \n",
       "2      0  STON/O2. 3101282   7.9250   NaN        S           1        1  Miss   \n",
       "3      0            113803  53.1000  C123        S           2        0   Mrs   \n",
       "4      0            373450   8.0500   NaN        S           1        1    Mr   \n",
       "\n",
       "      AgeGroup  FareGroup  \n",
       "0  Young Adult        Low  \n",
       "1        Adult  Very High  \n",
       "2  Young Adult     Medium  \n",
       "3        Adult  Very High  \n",
       "4        Adult     Medium  "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "34ff511c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T23:33:53.397203Z",
     "iopub.status.busy": "2024-08-15T23:33:53.396735Z",
     "iopub.status.idle": "2024-08-15T23:33:53.408106Z",
     "shell.execute_reply": "2024-08-15T23:33:53.406967Z"
    },
    "papermill": {
     "duration": 0.03116,
     "end_time": "2024-08-15T23:33:53.410579",
     "exception": false,
     "start_time": "2024-08-15T23:33:53.379419",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_data.drop(['Name', 'Ticket', 'Fare'], axis=1, inplace=True)\n",
    "test_data.drop(['Name', 'Ticket', 'Fare'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "7a84fbc7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T23:33:53.448588Z",
     "iopub.status.busy": "2024-08-15T23:33:53.448127Z",
     "iopub.status.idle": "2024-08-15T23:33:53.455940Z",
     "shell.execute_reply": "2024-08-15T23:33:53.454244Z"
    },
    "papermill": {
     "duration": 0.031192,
     "end_time": "2024-08-15T23:33:53.459736",
     "exception": false,
     "start_time": "2024-08-15T23:33:53.428544",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Pipeline for the numerical attributes:\n",
    "num_pipeline = Pipeline([\n",
    "    ('imputer', SimpleImputer(missing_values=np.nan, strategy='median'))\n",
    "])\n",
    "\n",
    "\n",
    "# Pipeline for the categorical attributes:\n",
    "cat_pipeline = Pipeline([\n",
    "    ('imputer', SimpleImputer(missing_values=np.nan, strategy='most_frequent')),\n",
    "    ('encoder', OrdinalEncoder())\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "1ea1c94e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T23:33:53.494532Z",
     "iopub.status.busy": "2024-08-15T23:33:53.494061Z",
     "iopub.status.idle": "2024-08-15T23:33:53.555387Z",
     "shell.execute_reply": "2024-08-15T23:33:53.553844Z"
    },
    "papermill": {
     "duration": 0.082182,
     "end_time": "2024-08-15T23:33:53.558796",
     "exception": false,
     "start_time": "2024-08-15T23:33:53.476614",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Missing values in Age column before Imputation:  177\n",
      "Missing values in Age column after Imputation:  0\n",
      "\n",
      "Missing values in Embarked column before Imputation:  2\n",
      "Missing values in Embarked column after Imputation:  0\n",
      "\n",
      "Categorical values after encoding: \n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Embarked</th>\n",
       "      <th>Title</th>\n",
       "      <th>AgeGroup</th>\n",
       "      <th>FareGroup</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Cabin</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>47.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>81.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>47.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>55.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>47.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>886</th>\n",
       "      <td>2.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>47.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>887</th>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>30.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>888</th>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>47.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>889</th>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>60.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>890</th>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>47.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>891 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Embarked  Title  AgeGroup  FareGroup  Sex  Cabin\n",
       "0         2.0    2.0       4.0        1.0  1.0   47.0\n",
       "1         0.0    3.0       0.0        3.0  0.0   81.0\n",
       "2         2.0    1.0       4.0        2.0  0.0   47.0\n",
       "3         2.0    3.0       0.0        3.0  0.0   55.0\n",
       "4         2.0    2.0       0.0        2.0  1.0   47.0\n",
       "..        ...    ...       ...        ...  ...    ...\n",
       "886       2.0    4.0       4.0        2.0  1.0   47.0\n",
       "887       2.0    1.0       4.0        0.0  0.0   30.0\n",
       "888       2.0    1.0       4.0        0.0  0.0   47.0\n",
       "889       0.0    2.0       4.0        0.0  1.0   60.0\n",
       "890       1.0    2.0       0.0        1.0  1.0   47.0\n",
       "\n",
       "[891 rows x 6 columns]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Impute missing values in the Age column\n",
    "print(\"Missing values in Age column before Imputation: \", train_data['Age'].isnull().sum())\n",
    "train_data['Age'] = num_pipeline.fit_transform(train_data[['Age']])\n",
    "print(\"Missing values in Age column after Imputation: \", train_data['Age'].isnull().sum())\n",
    "\n",
    "# Impute missing values in the Embarked column\n",
    "print(\"\\nMissing values in Embarked column before Imputation: \", train_data['Embarked'].isnull().sum())\n",
    "train_data['Embarked'] = cat_pipeline.fit_transform(train_data[['Embarked']])\n",
    "print(\"Missing values in Embarked column after Imputation: \", train_data['Embarked'].isnull().sum())\n",
    "\n",
    "# Encode the categorical values\n",
    "train_data[['Title', 'AgeGroup', 'FareGroup', 'Sex', \"Cabin\"]] = cat_pipeline.fit_transform(train_data[['Title', 'AgeGroup', 'FareGroup', 'Sex', \"Cabin\"]])\n",
    "print(\"\\nCategorical values after encoding: \")\n",
    "train_data[['Embarked', 'Title', 'AgeGroup', 'FareGroup', 'Sex', \"Cabin\"]]\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "719892f7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T23:33:53.593528Z",
     "iopub.status.busy": "2024-08-15T23:33:53.593028Z",
     "iopub.status.idle": "2024-08-15T23:33:53.647679Z",
     "shell.execute_reply": "2024-08-15T23:33:53.646093Z"
    },
    "papermill": {
     "duration": 0.07514,
     "end_time": "2024-08-15T23:33:53.650363",
     "exception": false,
     "start_time": "2024-08-15T23:33:53.575223",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Missing values in Age column before Imputation:  86\n",
      "Missing values in Age column after Imputation:  0\n",
      "\n",
      "Missing values in Embarked column before Imputation:  0\n",
      "Missing values in Embarked column after Imputation:  0\n",
      "\n",
      "Categorical values after encoding: \n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Embarked</th>\n",
       "      <th>Title</th>\n",
       "      <th>AgeGroup</th>\n",
       "      <th>FareGroup</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Cabin</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>15.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>15.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>15.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>15.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>15.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>413</th>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>15.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>414</th>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>22.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>415</th>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>15.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>416</th>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>15.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>417</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>15.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>418 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Embarked  Title  AgeGroup  FareGroup  Sex  Cabin\n",
       "0         1.0    2.0       0.0        1.0  1.0   15.0\n",
       "1         2.0    3.0       0.0        1.0  0.0   15.0\n",
       "2         1.0    2.0       2.0        2.0  1.0   15.0\n",
       "3         2.0    2.0       4.0        2.0  1.0   15.0\n",
       "4         2.0    3.0       4.0        2.0  0.0   15.0\n",
       "..        ...    ...       ...        ...  ...    ...\n",
       "413       2.0    2.0       4.0        2.0  1.0   15.0\n",
       "414       0.0    4.0       0.0        3.0  0.0   22.0\n",
       "415       2.0    2.0       0.0        1.0  1.0   15.0\n",
       "416       2.0    2.0       4.0        2.0  1.0   15.0\n",
       "417       0.0    0.0       4.0        0.0  1.0   15.0\n",
       "\n",
       "[418 rows x 6 columns]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Impute missing values in the Age column\n",
    "print(\"Missing values in Age column before Imputation: \", test_data['Age'].isnull().sum())\n",
    "test_data['Age'] = num_pipeline.fit_transform(test_data[['Age']])\n",
    "print(\"Missing values in Age column after Imputation: \", test_data['Age'].isnull().sum())\n",
    "\n",
    "# Impute missing values in the Embarked column\n",
    "print(\"\\nMissing values in Embarked column before Imputation: \", test_data['Embarked'].isnull().sum())\n",
    "test_data['Embarked'] = cat_pipeline.fit_transform(test_data[['Embarked']])\n",
    "print(\"Missing values in Embarked column after Imputation: \", test_data['Embarked'].isnull().sum())\n",
    "\n",
    "# Encode the categorical values\n",
    "test_data[['Title', 'AgeGroup', 'FareGroup', 'Sex', \"Cabin\"]] = cat_pipeline.fit_transform(test_data[['Title', 'AgeGroup', 'FareGroup', 'Sex', \"Cabin\"]])\n",
    "print(\"\\nCategorical values after encoding: \")\n",
    "test_data[['Embarked', 'Title', 'AgeGroup', 'FareGroup', 'Sex', \"Cabin\"]]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "dcb69990",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T23:33:53.686733Z",
     "iopub.status.busy": "2024-08-15T23:33:53.685268Z",
     "iopub.status.idle": "2024-08-15T23:33:53.694119Z",
     "shell.execute_reply": "2024-08-15T23:33:53.692848Z"
    },
    "papermill": {
     "duration": 0.029772,
     "end_time": "2024-08-15T23:33:53.696941",
     "exception": false,
     "start_time": "2024-08-15T23:33:53.667169",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Preprocessing steps for Machine Learning\n",
    "X = train_data.drop('Survived', axis=1)\n",
    "y = train_data['Survived']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "6e7e20d2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T23:33:53.732423Z",
     "iopub.status.busy": "2024-08-15T23:33:53.731369Z",
     "iopub.status.idle": "2024-08-15T23:33:53.742772Z",
     "shell.execute_reply": "2024-08-15T23:33:53.741459Z"
    },
    "papermill": {
     "duration": 0.032111,
     "end_time": "2024-08-15T23:33:53.745629",
     "exception": false,
     "start_time": "2024-08-15T23:33:53.713518",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Split the data\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "e78ca01f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T23:33:53.782378Z",
     "iopub.status.busy": "2024-08-15T23:33:53.781269Z",
     "iopub.status.idle": "2024-08-15T23:33:53.795781Z",
     "shell.execute_reply": "2024-08-15T23:33:53.794403Z"
    },
    "papermill": {
     "duration": 0.035954,
     "end_time": "2024-08-15T23:33:53.799019",
     "exception": false,
     "start_time": "2024-08-15T23:33:53.763065",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Apply feature scaling\n",
    "sc = StandardScaler()\n",
    "X_train = sc.fit_transform(X_train)\n",
    "X_test = sc.transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "899e0a30",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T23:33:53.835157Z",
     "iopub.status.busy": "2024-08-15T23:33:53.834692Z",
     "iopub.status.idle": "2024-08-15T23:33:54.464791Z",
     "shell.execute_reply": "2024-08-15T23:33:54.463258Z"
    },
    "papermill": {
     "duration": 0.651864,
     "end_time": "2024-08-15T23:33:54.467966",
     "exception": false,
     "start_time": "2024-08-15T23:33:53.816102",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Random Forest Classifier\n",
    "rfc = RandomForestClassifier(n_estimators=200)\n",
    "rfc.fit(X_train, y_train)\n",
    "pred_rfc = rfc.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "906adfba",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T23:33:54.504097Z",
     "iopub.status.busy": "2024-08-15T23:33:54.503630Z",
     "iopub.status.idle": "2024-08-15T23:33:54.525766Z",
     "shell.execute_reply": "2024-08-15T23:33:54.523971Z"
    },
    "papermill": {
     "duration": 0.043768,
     "end_time": "2024-08-15T23:33:54.529142",
     "exception": false,
     "start_time": "2024-08-15T23:33:54.485374",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy score:  0.8324022346368715\n",
      "\n",
      "Classification report: \n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.84      0.88      0.86       105\n",
      "           1       0.81      0.77      0.79        74\n",
      "\n",
      "    accuracy                           0.83       179\n",
      "   macro avg       0.83      0.82      0.83       179\n",
      "weighted avg       0.83      0.83      0.83       179\n",
      "\n",
      "\n",
      "Confusion matrix: \n",
      " [[92 13]\n",
      " [17 57]]\n"
     ]
    }
   ],
   "source": [
    "#Check the model's accuracy\n",
    "print(\"Accuracy score: \", accuracy_score(y_test, pred_rfc))\n",
    "print(\"\\nClassification report: \\n\", classification_report(y_test, pred_rfc))\n",
    "print(\"\\nConfusion matrix: \\n\", confusion_matrix(y_test, pred_rfc))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "008bd11e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T23:33:54.566503Z",
     "iopub.status.busy": "2024-08-15T23:33:54.566006Z",
     "iopub.status.idle": "2024-08-15T23:33:54.572529Z",
     "shell.execute_reply": "2024-08-15T23:33:54.570996Z"
    },
    "papermill": {
     "duration": 0.029146,
     "end_time": "2024-08-15T23:33:54.575374",
     "exception": false,
     "start_time": "2024-08-15T23:33:54.546228",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(418, 13)\n"
     ]
    }
   ],
   "source": [
    "print(test_data.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "ec9d9734",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T23:33:54.610302Z",
     "iopub.status.busy": "2024-08-15T23:33:54.609857Z",
     "iopub.status.idle": "2024-08-15T23:33:54.638222Z",
     "shell.execute_reply": "2024-08-15T23:33:54.636984Z"
    },
    "papermill": {
     "duration": 0.049593,
     "end_time": "2024-08-15T23:33:54.641363",
     "exception": false,
     "start_time": "2024-08-15T23:33:54.591770",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Generate predictions for the test data\n",
    "test_predictions = rfc.predict(test_data.values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "e57df5f5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T23:33:54.677874Z",
     "iopub.status.busy": "2024-08-15T23:33:54.676795Z",
     "iopub.status.idle": "2024-08-15T23:33:55.072155Z",
     "shell.execute_reply": "2024-08-15T23:33:55.070766Z"
    },
    "papermill": {
     "duration": 0.416798,
     "end_time": "2024-08-15T23:33:55.075095",
     "exception": false,
     "start_time": "2024-08-15T23:33:54.658297",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Get feature importances\n",
    "feature_importance = rfc.feature_importances_\n",
    "feature_names = X.columns\n",
    "\n",
    "# Sort features by importance\n",
    "sorted_idx = feature_importance.argsort()\n",
    "\n",
    "# Create a horizontal bar plot\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.barh(range(len(sorted_idx)), feature_importance[sorted_idx], align='center')\n",
    "plt.yticks(range(len(sorted_idx)), [feature_names[i] for i in sorted_idx])\n",
    "plt.xlabel('Feature Importance')\n",
    "plt.title('Feature Importance of Random Forest Model')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "0257f1a2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T23:33:55.112148Z",
     "iopub.status.busy": "2024-08-15T23:33:55.111718Z",
     "iopub.status.idle": "2024-08-15T23:33:55.124423Z",
     "shell.execute_reply": "2024-08-15T23:33:55.122929Z"
    },
    "papermill": {
     "duration": 0.034805,
     "end_time": "2024-08-15T23:33:55.127567",
     "exception": false,
     "start_time": "2024-08-15T23:33:55.092762",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "submission=pd.read_csv('/kaggle/input/titanic/gender_submission.csv')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "a2a18021",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T23:33:55.165945Z",
     "iopub.status.busy": "2024-08-15T23:33:55.165540Z",
     "iopub.status.idle": "2024-08-15T23:33:55.179390Z",
     "shell.execute_reply": "2024-08-15T23:33:55.177771Z"
    },
    "papermill": {
     "duration": 0.036615,
     "end_time": "2024-08-15T23:33:55.182622",
     "exception": false,
     "start_time": "2024-08-15T23:33:55.146007",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>892</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>893</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>894</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>895</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>896</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>413</th>\n",
       "      <td>1305</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>414</th>\n",
       "      <td>1306</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>415</th>\n",
       "      <td>1307</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>416</th>\n",
       "      <td>1308</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>417</th>\n",
       "      <td>1309</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>418 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Survived\n",
       "0            892         0\n",
       "1            893         1\n",
       "2            894         0\n",
       "3            895         0\n",
       "4            896         1\n",
       "..           ...       ...\n",
       "413         1305         0\n",
       "414         1306         1\n",
       "415         1307         0\n",
       "416         1308         0\n",
       "417         1309         0\n",
       "\n",
       "[418 rows x 2 columns]"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "submission\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "0c7e7dd4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T23:33:55.220763Z",
     "iopub.status.busy": "2024-08-15T23:33:55.220232Z",
     "iopub.status.idle": "2024-08-15T23:33:55.229762Z",
     "shell.execute_reply": "2024-08-15T23:33:55.228106Z"
    },
    "papermill": {
     "duration": 0.032179,
     "end_time": "2024-08-15T23:33:55.232863",
     "exception": false,
     "start_time": "2024-08-15T23:33:55.200684",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PassengerId    0\n",
      "Survived       0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(submission.isnull().sum())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "cdff3aa9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T23:33:55.271517Z",
     "iopub.status.busy": "2024-08-15T23:33:55.269982Z",
     "iopub.status.idle": "2024-08-15T23:33:55.280084Z",
     "shell.execute_reply": "2024-08-15T23:33:55.278086Z"
    },
    "papermill": {
     "duration": 0.032333,
     "end_time": "2024-08-15T23:33:55.283066",
     "exception": false,
     "start_time": "2024-08-15T23:33:55.250733",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PassengerId    int64\n",
      "Survived       int64\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "print(submission.dtypes)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "128ccdea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T23:33:55.321668Z",
     "iopub.status.busy": "2024-08-15T23:33:55.321133Z",
     "iopub.status.idle": "2024-08-15T23:33:55.329098Z",
     "shell.execute_reply": "2024-08-15T23:33:55.327528Z"
    },
    "papermill": {
     "duration": 0.030839,
     "end_time": "2024-08-15T23:33:55.331643",
     "exception": false,
     "start_time": "2024-08-15T23:33:55.300804",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "submission = pd.DataFrame({'PassengerId': test_data['PassengerId'], 'Survived': test_predictions})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "85ec4856",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T23:33:55.439616Z",
     "iopub.status.busy": "2024-08-15T23:33:55.439085Z",
     "iopub.status.idle": "2024-08-15T23:33:55.448393Z",
     "shell.execute_reply": "2024-08-15T23:33:55.447013Z"
    },
    "papermill": {
     "duration": 0.101865,
     "end_time": "2024-08-15T23:33:55.451367",
     "exception": false,
     "start_time": "2024-08-15T23:33:55.349502",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(418, 2)"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "submission.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "13abbc9e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-15T23:33:55.490376Z",
     "iopub.status.busy": "2024-08-15T23:33:55.489852Z",
     "iopub.status.idle": "2024-08-15T23:33:55.500161Z",
     "shell.execute_reply": "2024-08-15T23:33:55.498888Z"
    },
    "papermill": {
     "duration": 0.033534,
     "end_time": "2024-08-15T23:33:55.503311",
     "exception": false,
     "start_time": "2024-08-15T23:33:55.469777",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "submission.to_csv('submission.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d5ec449c",
   "metadata": {
    "papermill": {
     "duration": 0.017832,
     "end_time": "2024-08-15T23:33:55.539289",
     "exception": false,
     "start_time": "2024-08-15T23:33:55.521457",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 26502,
     "sourceId": 3136,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30746,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 12.341352,
   "end_time": "2024-08-15T23:33:56.585445",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-08-15T23:33:44.244093",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
